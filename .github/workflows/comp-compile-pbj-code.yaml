name: "ZC: Compile"
on:
  workflow_call:
    inputs:
      enable-unit-tests:
        description: "Unit Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-integration-tests:
        description: "Integration Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-jmh-tests:
        description: "JMH Benchmark Testing Enabled"
        type: boolean
        required: false
        default: false
      enable-sonar-analysis:
        description: "Sonar Analysis Enabled"
        type: boolean
        required: false
        default: false
      enable-snyk-scan:
        description: "Snyk Scan Enabled"
        type: boolean
        required: false
        default: false
      enable-snyk-monitor:
        description: "Snyk Monitor Enabled"
        type: boolean
        required: false
        default: false
      java-distribution:
        description: "Java JDK Distribution:"
        type: string
        required: false
        default: "temurin"
      java-version:
        description: "Java JDK Version:"
        type: string
        required: false
        default: "17.0.5"
      gradle-version:
        description: "Gradle Version:"
        type: string
        required: false
        default: "wrapper"
      custom-job-label:
        description: "Custom Job Label:"
        type: string
        required: false
        default: "Compiles"

    secrets:
      access-token:
        description: "The Github access token used to checkout the repository, submodules, and make GitHub API calls."
        required: true
      sonar-token:
        description: "The SonarCloud access token used by the SonarQube agent to report an analysis."
        required: false
      snyk-token:
        description: "The Snyk access token is used by Snyk to analyze the code for vulnerabilities."
        required: false

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  pull-requests: write
  statuses: write
  checks: write
  issues: read
  contents: read

env:
  LC_ALL: C.UTF-8
  PBJ_CORE: pbj-core
  PBJ_INTEGRATION_TESTS: pbj-integration-tests

jobs:
  compile:
    name: ${{ inputs.custom-job-label || 'Compiles' }}
    runs-on: [ self-hosted, Linux, pbj, standard, ephemeral ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          gradle-home-cache-strict-match: false
          gradle-home-cache-includes: |
            caches
            notifications
            jdks

      - name: Setup Node.js
        uses: actions/setup-node@v3
        if: ${{ inputs.enable-snyk-scan && !cancelled() && always()}}
        with: 
          node-version: 18

      - name: Gradle Assemble (PBJ Core)
        id: gradle-build
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_CORE }}
          arguments: assemble --scan

      - name: Gradle Check (PBJ Core)
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-unit-tests && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_CORE }}
          arguments: check --scan

      - name: Publish JUnit Test Report (PBJ Core)
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ inputs.enable-unit-tests && steps.gradle-build.conclusion == 'success' && !cancelled() && always() }}
        with:
          check_name: JUnit Test Report
          time_unit: seconds
          junit_files: "${{ env.PBJ_CORE }}/**/build/test-results/**/*.xml"

      - name: Gradle Maven Local (PBJ Core)
        id: gradle-publish-local
        uses: gradle/gradle-build-action@v2
        if: ${{ (inputs.enable-integration-tests || inputs.enable-jmh-tests) && steps.gradle-build.conclusion == 'success' && !cancelled() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_CORE }}
          arguments: publishToMavenLocal --scan

      - name: Gradle Assemble (PBJ Integration)
        id: gradle-integration-build
        uses: gradle/gradle-build-action@v2
        if: ${{ (inputs.enable-integration-tests || inputs.enable-jmh-tests) && steps.gradle-publish-local.conclusion == 'success' && !cancelled() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_INTEGRATION_TESTS }}
          arguments: assemble --scan

      - name: Gradle Check (PBJ Integration)
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-integration-tests && steps.gradle-integration-build.conclusion == 'success' && !cancelled() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_INTEGRATION_TESTS }}
          arguments: check --scan

      - name: Publish Integration Test Report (PBJ Integration)
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ inputs.enable-integration-tests && steps.gradle-integration-build.conclusion == 'success' && !cancelled() && always() }}
        with:
          check_name: Integration Test Report
          time_unit: seconds
          junit_files: "${{ env.PBJ_INTEGRATION_TESTS }}/**/build/test-results/**/*.xml"

      - name: Gradle JMH Jars (PBJ Integration)
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-jmh-tests && steps.gradle-integration-build.conclusion == 'success' && !cancelled() && always() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_INTEGRATION_TESTS }}
          arguments: jmhJar --scan

      - name: Gradle JMH Benchmarks (PBJ Integration)
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-jmh-tests && steps.gradle-integration-build.conclusion == 'success' && !cancelled() && always() }}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_INTEGRATION_TESTS }}
          arguments: jmh --scan

      - name: Gradle Snyk Test (PBJ Core)
        id: gradle-snyk-test
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-snyk-scan && !cancelled() && always()}}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_CORE }}
          arguments: snyk-test
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}

      - name: Gradle Snyk Code Test (PBJ Core)
        id: gradle-snyk-code
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-snyk-scan && !cancelled() && always()}}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_CORE }}
          arguments: snyk-code
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}

      - name: Setup Snyk Reports
        if: ${{ inputs.enable-snyk-scan && !cancelled() && always()}}
        run: npm install -g snyk-to-html @wcj/html-to-markdown-cli

      - name: Publish Snyk Results
        if: ${{ inputs.enable-snyk-scan && !cancelled() && always()}}
        run: |
          snyk-to-html -i build/reports/snyk-test.json -o build/reports/snyk-test.html && \
          html-to-markdown build/reports/snyk-test.html -o  build/reports/snyk && \
          cat build/reports/snyk/snyk-test.html.md >> $GITHUB_STEP_SUMMARY
          snyk-to-html -i build/reports/snyk-code.sarif -o build/reports/snyk-code.html && \
          html-to-markdown build/reports/snyk-code.html -o  build/reports/snyk && \
          cat build/reports/snyk/snyk-code.html.md >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ env.PBJ_CORE }}

      - name: Gradle Snyk Monitor(PBJ Core)
        id: gradle-snyk-monitor
        uses: gradle/gradle-build-action@v2
        if: ${{ inputs.enable-snyk-monitor && !cancelled() && always()}}
        with:
          gradle-version: ${{ inputs.gradle-version }}
          build-root-directory: ${{ env.PBJ_CORE }}
          arguments: snyk-monitor
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
#      - name: SonarCloud Options
#        id: sonar-cloud
#        env:
#          IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
#        if: ${{ inputs.enable-sonar-analysis && steps.gradle-build.conclusion == 'success' && !cancelled() && always() }}
#        run: |
#          SONAR_OPTS="-Dsonar.branch.name=${{ github.ref_name }}"
#          if [[ "${IS_PULL_REQUEST}" == true ]]; then
#            SONAR_OPTS=""
#          fi
#
#          echo "::set-output name=options::${SONAR_OPTS}"

#      - name: Gradle SonarCloud Scan (PBJ Core)
#        uses: gradle/gradle-build-action@v2
#        env:
#          GITHUB_TOKEN: ${{ secrets.access-token }}
#          SONAR_TOKEN: ${{ secrets.sonar-token }}
#        if: ${{ inputs.enable-sonar-analysis && steps.gradle-build.conclusion == 'success' && !cancelled() && always() }}
#        with:
#          gradle-version: ${{ inputs.gradle-version }}
#          build-root-directory: ${{ env.PBJ_CORE }}
#          arguments: sonarqube --info --scan ${{ steps.sonar-cloud.outputs.options }}
