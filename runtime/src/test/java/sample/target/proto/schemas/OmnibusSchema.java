package sample.target.proto.schemas;

import com.hedera.hashgraph.protoparse.FieldDefinition;
import com.hedera.hashgraph.protoparse.FieldType;

public class OmnibusSchema {
    public static final FieldDefinition INT32_NUMBER = new FieldDefinition("int32Number", FieldType.INT_32, false, 10);
    public static final FieldDefinition INT64_NUMBER = new FieldDefinition("int64Number", FieldType.INT_64, false, 11);
    public static final FieldDefinition UINT32_NUMBER = new FieldDefinition("uint32Number", FieldType.UINT_32, false, 12);
    public static final FieldDefinition UINT64_NUMBER = new FieldDefinition("unit64Number", FieldType.UINT_64, false, 13);
    public static final FieldDefinition FLAG = new FieldDefinition("flag", FieldType.BOOL, false, 14);
    public static final FieldDefinition SUIT = new FieldDefinition("suitEnum", FieldType.ENUM, false, 15);
    public static final FieldDefinition SINT32_NUMBER = new FieldDefinition("sint32Number", FieldType.SINT_32, false, 30);
    public static final FieldDefinition SINT64_NUMBER = new FieldDefinition("sint64Number", FieldType.SINT_64, false, 31);
    public static final FieldDefinition SFIXED32_NUMBER = new FieldDefinition("sfixed32Number", FieldType.SFIXED_32, false, 20);
    public static final FieldDefinition SFIXED64_NUMBER = new FieldDefinition("sfixed64Number", FieldType.SFIXED_64, false, 25);
    public static final FieldDefinition FIXED32_NUMBER = new FieldDefinition("fixed32Number", FieldType.FIXED_32, false, 21);
    public static final FieldDefinition FIXED64_NUMBER = new FieldDefinition("fixed64Number", FieldType.FIXED_64, false, 26);
    public static final FieldDefinition FLOAT_NUMBER = new FieldDefinition("floatNumber", FieldType.FLOAT, false, 22);
    public static final FieldDefinition DOUBLE_NUMBER = new FieldDefinition("doubleNumber", FieldType.DOUBLE, false, 27);
    public static final FieldDefinition MEMO = new FieldDefinition("memo", FieldType.STRING, false, 1);
    public static final FieldDefinition RANDOM_BYTES = new FieldDefinition("randomBytes", FieldType.BYTES, false, 2);
    public static final FieldDefinition NESTED = new FieldDefinition("nested", FieldType.MESSAGE, false, 3);
    public static final FieldDefinition FRUIT_APPLE = new FieldDefinition("fruit.apple", FieldType.MESSAGE, false, 200);
    public static final FieldDefinition FRUIT_BANANA = new FieldDefinition("fruit.banana", FieldType.MESSAGE, false, 201);
    public static final FieldDefinition INT32_UNIQUE = new FieldDefinition("int32Unique", FieldType.INT_32, false, 210);
    public static final FieldDefinition INT64_UNIQUE = new FieldDefinition("int64Unique", FieldType.INT_64, false, 211);
    public static final FieldDefinition UINT32_UNIQUE = new FieldDefinition("uint32Unique", FieldType.UINT_32, false, 212);
    public static final FieldDefinition UINT64_UNIQUE = new FieldDefinition("uint64Unique", FieldType.UINT_64, false, 213);
    public static final FieldDefinition FLAG_UNIQUE = new FieldDefinition("flagUnique", FieldType.BOOL, false, 214);
    public static final FieldDefinition SUIT_UNIQUE = new FieldDefinition("suiteEnumUnique", FieldType.ENUM, false, 215);
    public static final FieldDefinition SINT32_UNIQUE = new FieldDefinition("sint32Unique", FieldType.SINT_32, false, 230);
    public static final FieldDefinition SINT64_UNIQUE = new FieldDefinition("sint64Unique", FieldType.SINT_64, false, 231);
    public static final FieldDefinition SFIXED32_UNIQUE = new FieldDefinition("sfixed32Unique", FieldType.SFIXED_32, false, 220);
    public static final FieldDefinition SFIXED64_UNIQUE = new FieldDefinition("sfixed64Unique", FieldType.SFIXED_64, false, 225);
    public static final FieldDefinition FIXED32_UNIQUE = new FieldDefinition("fixed32Unique", FieldType.FIXED_32, false, 221);
    public static final FieldDefinition FIXED64_UNIQUE = new FieldDefinition("fixed64Unique", FieldType.FIXED_64, false, 226);
    public static final FieldDefinition FLOAT_UNIQUE = new FieldDefinition("floatUnique", FieldType.FLOAT, false, 222);
    public static final FieldDefinition DOUBLE_UNIQUE = new FieldDefinition("doubleUnique", FieldType.DOUBLE, false, 227);
    public static final FieldDefinition MEMO_UNIQUE = new FieldDefinition("memoUnique", FieldType.STRING, false, 251);
    public static final FieldDefinition RANDOM_BYTES_UNIQUE = new FieldDefinition("randomBytesUnique", FieldType.BYTES, false, 252);
    public static final FieldDefinition NESTED_UNIQUE = new FieldDefinition("nestedUnique", FieldType.MESSAGE, false, 253);
    public static final FieldDefinition INT32_REPEATED = new FieldDefinition("int32NumberList", FieldType.INT_32, true, 300);
    public static final FieldDefinition INT64_REPEATED = new FieldDefinition("int64NumberList", FieldType.INT_64, true, 301);
    public static final FieldDefinition UINT32_REPEATED = new FieldDefinition("uint32NumberList", FieldType.UINT_32, true, 302);
    public static final FieldDefinition UINT64_REPEATED = new FieldDefinition("uint64NumberList", FieldType.UINT_64, true, 303);
    public static final FieldDefinition FLAG_REPEATED = new FieldDefinition("flagList", FieldType.BOOL, true, 304);
    public static final FieldDefinition SUIT_REPEATED = new FieldDefinition("suitEnumList", FieldType.ENUM, true, 305);
    public static final FieldDefinition SINT32_REPEATED = new FieldDefinition("sint32NumberList", FieldType.SINT_32, true, 306);
    public static final FieldDefinition SINT64_REPEATED = new FieldDefinition("sint64NumberList", FieldType.SINT_64, true, 307);
    public static final FieldDefinition SFIXED32_REPEATED = new FieldDefinition("sfixed32NumberList", FieldType.SFIXED_32, true, 308);
    public static final FieldDefinition SFIXED64_REPEATED = new FieldDefinition("sfixed64NumberList", FieldType.SFIXED_64, true, 309);
    public static final FieldDefinition FIXED32_REPEATED = new FieldDefinition("fixed32NumberList", FieldType.FIXED_32, true, 310);
    public static final FieldDefinition FIXED64_REPEATED = new FieldDefinition("fixed64NumberList", FieldType.FIXED_64, true, 311);
    public static final FieldDefinition FLOAT_REPEATED = new FieldDefinition("floatNumberList", FieldType.FLOAT, true, 312);
    public static final FieldDefinition DOUBLE_REPEATED = new FieldDefinition("doubleNumberList", FieldType.DOUBLE, true, 313);
    public static final FieldDefinition MEMO_REPEATED = new FieldDefinition("memoList", FieldType.STRING, true, 314);
    public static final FieldDefinition RANDOM_BYTES_REPEATED = new FieldDefinition("randomBytesList", FieldType.BYTES, true, 315);
    public static final FieldDefinition NESTED_REPEATED = new FieldDefinition("nestedList", FieldType.MESSAGE, true, 316);
    public static final FieldDefinition FRUITS_REPEATED = new FieldDefinition("fruitsList", FieldType.MESSAGE, true, 317);

    public static boolean valid(FieldDefinition field) {
        return field != null && field == getField(field.number());
    }

    public static FieldDefinition getField(final int fieldNumber) {
        return switch (fieldNumber) {
            case 10 -> INT32_NUMBER;
            case 11 -> INT64_NUMBER;
            case 12 -> UINT32_NUMBER;
            case 13 -> UINT64_NUMBER;
            case 14 -> FLAG;
            case 15 -> SUIT;
            case 30 -> SINT32_NUMBER;
            case 31 -> SINT64_NUMBER;
            case 20 -> SFIXED32_NUMBER;
            case 25 -> SFIXED64_NUMBER;
            case 21 -> FIXED32_NUMBER;
            case 26 -> FIXED64_NUMBER;
            case 22 -> FLOAT_NUMBER;
            case 27 -> DOUBLE_NUMBER;
            case 1 -> MEMO;
            case 2 -> RANDOM_BYTES;
            case 3 -> NESTED;
            case 200 -> FRUIT_APPLE;
            case 201 -> FRUIT_BANANA;
            case 210 -> INT32_UNIQUE;
            case 211 -> INT64_UNIQUE;
            case 212 -> UINT32_UNIQUE;
            case 213 -> UINT64_UNIQUE;
            case 214 -> FLAG_UNIQUE;
            case 215 -> SUIT_UNIQUE;
            case 230 -> SINT32_UNIQUE;
            case 231 -> SINT64_UNIQUE;
            case 220 -> SFIXED32_UNIQUE;
            case 225 -> SFIXED64_UNIQUE;
            case 221 -> FIXED32_UNIQUE;
            case 226 -> FIXED64_UNIQUE;
            case 222 -> FLOAT_UNIQUE;
            case 227 -> DOUBLE_UNIQUE;
            case 251 -> MEMO_UNIQUE;
            case 252 -> RANDOM_BYTES_UNIQUE;
            case 253 -> NESTED_UNIQUE;
            case 300 -> INT32_REPEATED;
            case 301 -> INT64_REPEATED;
            case 302 -> UINT32_REPEATED;
            case 303 -> UINT64_REPEATED;
            case 304 -> FLAG_REPEATED;
            case 305 -> SUIT_REPEATED;
            case 306 -> SINT32_REPEATED;
            case 307 -> SINT64_REPEATED;
            case 308 -> SFIXED32_REPEATED;
            case 309 -> SFIXED64_REPEATED;
            case 310 -> FIXED32_REPEATED;
            case 311 -> FIXED64_REPEATED;
            case 312 -> FLOAT_REPEATED;
            case 313 -> DOUBLE_REPEATED;
            case 314 -> MEMO_REPEATED;
            case 315 -> RANDOM_BYTES_REPEATED;
            case 316 -> NESTED_REPEATED;
            case 317 -> FRUITS_REPEATED;
            default -> null;
        };
    }
}
